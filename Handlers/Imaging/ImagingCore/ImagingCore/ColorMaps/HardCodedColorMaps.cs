using System;
using System.Collections.Generic;
using System.Text;

//------------------------------------------------------------------------------------------------------------
//                                      These are all hardcoded color maps
//------------------------------------------------------------------------------------------------------------

namespace Najm.ImagingCore.ColorMaps
{
    class I8ColorMap : RGBColorMap
    {
        public override void Initialize()
        {
            _type = ColorMapTypes.I8;
            _originalTable = new RGB[]
            {
                new RGB(0, 0, 0),
                new RGB(0, 255, 0),
                new RGB(0, 0, 255),
                new RGB(0, 255, 255),
                new RGB(255, 0, 0),
                new RGB(255, 255, 0),
                new RGB(255, 0, 255),
                new RGB(255, 255, 255)
            };
            BuildMap(_originalTable, 256);
        }
    }

    class AIPS0ColorMap : RGBColorMap
    {
        public override void Initialize()
        {
            _type = ColorMapTypes.AIPS0;
            _originalTable = new RGB[]
            {
                new RGB(50, 50, 50),
                new RGB(121, 0, 155),
                new RGB(0, 0, 200),
                new RGB(95, 167, 236),
                new RGB(0, 152, 0),
                new RGB(0, 246, 0),
                new RGB(255, 255, 0),
                new RGB(255, 177, 0),
                new RGB(255, 0, 0)
            };
            BuildMap(_originalTable, 256);
        }
    }

    class StaircaseColorMap : RGBColorMap
    {
        public override void Initialize()
        {
            _type = ColorMapTypes.Staircase;
            _originalTable = new RGB[15];
            for (int i = 0; i < 5; i++)
            {
                double j = ((double)i + 1.0) / 5.0;
                byte a = (byte)(int)(j * 0.3 * 255);
                byte b = (byte)(int)(j * 1.0 * 255);
                _originalTable[i] = new RGB(a, a, b);
                _originalTable[i + 5] = new RGB(a, b, a);
                _originalTable[i + 10] = new RGB(b, a, a);
            }
            BuildMap(_originalTable, 256);
        }
    }

    class ColorColorMap : RGBColorMap
    {
        public override void Initialize()
        {
            _type = ColorMapTypes.Color;
            double[] rgb = new double[]
            {
                0,0,0,
                0.18431, 0.18431, 0.18431,
                0.37255, 0.37255, 0.37255,
                0.56078, 0.56078, 0.56078,
                0.74902, 0.74902, 0.74902,
                0.93725, 0.93725, 0.93725,
                0.00000, 0.18431, 0.93725,
                0.00000, 0.37255, 0.74902,
                0.00000, 0.49804, 0.49804,
                0.00000, 0.74902, 0.30980,
                0.00000, 0.93725, 0.00000,
                0.30980, 0.62353, 0.00000,
                0.49804, 0.49804, 0.00000,
                0.62353, 0.30980, 0.00000,
                0.93725, 0.00000, 0.00000,
                0.74902, 0.00000, 0.30980
            };
            _originalTable = new RGB[rgb.Length/3];
            int index = 0;
            for (int i = 0; i < rgb.Length; i+=3)
            {
                byte r, g, b;
                r = (byte)(int)(rgb[i + 0] * 255.0);
                g = (byte)(int)(rgb[i + 1] * 255.0);
                b = (byte)(int)(rgb[i + 2] * 255.0);
                _originalTable[index++] = new RGB(r, g, b);
            }
            BuildMap(_originalTable, 256);
        }
    }


    class SLSColorMap : RGBColorMap
    {
        public override void Initialize()
        {
            #region data
            double[] rgb = new double[]
            {
                0.000000,0.000000,0.000000,
                0.043442,0.000000,0.052883,
                0.086883,0.000000,0.105767,
                0.130325,0.000000,0.158650,
                0.173767,0.000000,0.211533,
                0.217208,0.000000,0.264417,
                0.260650,0.000000,0.317300,
                0.304092,0.000000,0.370183,
                0.347533,0.000000,0.423067,
                0.390975,0.000000,0.475950,
                0.434417,0.000000,0.528833,
                0.477858,0.000000,0.581717,
                0.521300,0.000000,0.634600,
                0.506742,0.000000,0.640217,
                0.492183,0.000000,0.645833,
                0.477625,0.000000,0.651450,
                0.463067,0.000000,0.657067,
                0.448508,0.000000,0.662683,
                0.433950,0.000000,0.668300,
                0.419392,0.000000,0.673917,
                0.404833,0.000000,0.679533,
                0.390275,0.000000,0.685150,
                0.375717,0.000000,0.690767,
                0.361158,0.000000,0.696383,
                0.346600,0.000000,0.702000,
                0.317717,0.000000,0.712192,
                0.288833,0.000000,0.722383,
                0.259950,0.000000,0.732575,
                0.231067,0.000000,0.742767,
                0.202183,0.000000,0.752958,
                0.173300,0.000000,0.763150,
                0.144417,0.000000,0.773342,
                0.115533,0.000000,0.783533,
                0.086650,0.000000,0.793725,
                0.057767,0.000000,0.803917,
                0.028883,0.000000,0.814108,
                0.000000,0.000000,0.824300,
                0.000000,0.019817,0.838942,
                0.000000,0.039633,0.853583,
                0.000000,0.059450,0.868225,
                0.000000,0.079267,0.882867,
                0.000000,0.099083,0.897508,
                0.000000,0.118900,0.912150,
                0.000000,0.138717,0.926792,
                0.000000,0.158533,0.941433,
                0.000000,0.178350,0.956075,
                0.000000,0.198167,0.970717,
                0.000000,0.217983,0.985358,
                0.000000,0.237800,1.000000,
                0.000000,0.268533,1.000000,
                0.000000,0.299267,1.000000,
                0.000000,0.330000,1.000000,
                0.000000,0.360733,1.000000,
                0.000000,0.391467,1.000000,
                0.000000,0.422200,1.000000,
                0.000000,0.452933,1.000000,
                0.000000,0.483667,1.000000,
                0.000000,0.514400,1.000000,
                0.000000,0.545133,1.000000,
                0.000000,0.575867,1.000000,
                0.000000,0.606600,1.000000,
                0.000000,0.631733,0.975300,
                0.000000,0.656867,0.950600,
                0.000000,0.682000,0.925900,
                0.000000,0.707133,0.901200,
                0.000000,0.732267,0.876500,
                0.000000,0.757400,0.851800,
                0.000000,0.782533,0.827100,
                0.000000,0.807667,0.802400,
                0.000000,0.832800,0.777700,
                0.000000,0.857933,0.753000,
                0.000000,0.883067,0.728300,
                0.000000,0.908200,0.703600,
                0.000000,0.901908,0.676675,
                0.000000,0.895617,0.649750,
                0.000000,0.889325,0.622825,
                0.000000,0.883033,0.595900,
                0.000000,0.876742,0.568975,
                0.000000,0.870450,0.542050,
                0.000000,0.864158,0.515125,
                0.000000,0.857867,0.488200,
                0.000000,0.851575,0.461275,
                0.000000,0.845283,0.434350,
                0.000000,0.838992,0.407425,
                0.000000,0.832700,0.380500,
                0.000000,0.832308,0.354858,
                0.000000,0.831917,0.329217,
                0.000000,0.831525,0.303575,
                0.000000,0.831133,0.277933,
                0.000000,0.830742,0.252292,
                0.000000,0.830350,0.226650,
                0.000000,0.829958,0.201008,
                0.000000,0.829567,0.175367,
                0.000000,0.829175,0.149725,
                0.000000,0.828783,0.124083,
                0.000000,0.828392,0.098442,
                0.000000,0.828000,0.072800,
                0.033167,0.834167,0.066733,
                0.066333,0.840333,0.060667,
                0.099500,0.846500,0.054600,
                0.132667,0.852667,0.048533,
                0.165833,0.858833,0.042467,
                0.199000,0.865000,0.036400,
                0.232167,0.871167,0.030333,
                0.265333,0.877333,0.024267,
                0.298500,0.883500,0.018200,
                0.331667,0.889667,0.012133,
                0.364833,0.895833,0.006067,
                0.398000,0.902000,0.000000,
                0.430950,0.902000,0.000000,
                0.463900,0.902000,0.000000,
                0.496850,0.902000,0.000000,
                0.529800,0.902000,0.000000,
                0.562750,0.902000,0.000000,
                0.595700,0.902000,0.000000,
                0.628650,0.902000,0.000000,
                0.661600,0.902000,0.000000,
                0.694550,0.902000,0.000000,
                0.727500,0.902000,0.000000,
                0.760450,0.902000,0.000000,
                0.793400,0.902000,0.000000,
                0.810617,0.897133,0.003983,
                0.827833,0.892267,0.007967,
                0.845050,0.887400,0.011950,
                0.862267,0.882533,0.015933,
                0.879483,0.877667,0.019917,
                0.896700,0.872800,0.023900,
                0.913917,0.867933,0.027883,
                0.931133,0.863067,0.031867,
                0.948350,0.858200,0.035850,
                0.965567,0.853333,0.039833,
                0.982783,0.848467,0.043817,
                1.000000,0.843600,0.047800,
                0.995725,0.824892,0.051600,
                0.991450,0.806183,0.055400,
                0.987175,0.787475,0.059200,
                0.982900,0.768767,0.063000,
                0.978625,0.750058,0.066800,
                0.974350,0.731350,0.070600,
                0.970075,0.712642,0.074400,
                0.965800,0.693933,0.078200,
                0.961525,0.675225,0.082000,
                0.957250,0.656517,0.085800,
                0.952975,0.637808,0.089600,
                0.948700,0.619100,0.093400,
                0.952975,0.600408,0.085617,
                0.957250,0.581717,0.077833,
                0.961525,0.563025,0.070050,
                0.965800,0.544333,0.062267,
                0.970075,0.525642,0.054483,
                0.974350,0.506950,0.046700,
                0.978625,0.488258,0.038917,
                0.982900,0.469567,0.031133,
                0.987175,0.450875,0.023350,
                0.991450,0.432183,0.015567,
                0.995725,0.413492,0.007783,
                1.000000,0.394800,0.000000,
                0.998342,0.361900,0.000000,
                0.996683,0.329000,0.000000,
                0.995025,0.296100,0.000000,
                0.993367,0.263200,0.000000,
                0.991708,0.230300,0.000000,
                0.990050,0.197400,0.000000,
                0.988392,0.164500,0.000000,
                0.986733,0.131600,0.000000,
                0.985075,0.098700,0.000000,
                0.983417,0.065800,0.000000,
                0.981758,0.032900,0.000000,
                0.980100,0.000000,0.000000,
                0.955925,0.000000,0.000000,
                0.931750,0.000000,0.000000,
                0.907575,0.000000,0.000000,
                0.883400,0.000000,0.000000,
                0.859225,0.000000,0.000000,
                0.835050,0.000000,0.000000,
                0.810875,0.000000,0.000000,
                0.786700,0.000000,0.000000,
                0.762525,0.000000,0.000000,
                0.738350,0.000000,0.000000,
                0.714175,0.000000,0.000000,
                0.690000,0.000000,0.000000,
                0.715833,0.083333,0.083333,
                0.741667,0.166667,0.166667,
                0.767500,0.250000,0.250000,
                0.793333,0.333333,0.333333,
                0.819167,0.416667,0.416667,
                0.845000,0.500000,0.500000,
                0.870833,0.583333,0.583333,
                0.896667,0.666667,0.666667,
                0.922500,0.750000,0.750000,
                0.948333,0.833333,0.833333,
                0.974167,0.916667,0.916667,
                1.000000,1.000000,1.000000,
                1.000000,1.000000,1.000000,
                1.000000,1.000000,1.000000,
                1.000000,1.000000,1.000000,
                1.000000,1.000000,1.000000,
                1.000000,1.000000,1.000000,
                1.000000,1.000000,1.000000,
                1.000000,1.000000,1.000000
           };
            #endregion
            _type = ColorMapTypes.SLS;
            _originalTable = new RGB[rgb.Length / 3];
            int index = 0;
            for (int i = 0; i < rgb.Length; i += 3)
            {
                byte r, g, b;
                r = (byte)(int)(rgb[i + 0] * 255.0);
                g = (byte)(int)(rgb[i + 1] * 255.0);
                b = (byte)(int)(rgb[i + 2] * 255.0);
                _originalTable[index++] = new RGB(r, g, b);
            }
            _table = new RGB[_originalTable.Length];
            _originalTable.CopyTo(_table, 0);
        }
    }

    class HSVColorMap : RGBColorMap
    {
        public override void Initialize()
        {
            _type = ColorMapTypes.HSV;
            _originalTable = new RGB[200];
            for (int i = 0; i < _originalTable.Length; i++)
            {
                // generate in hsv
                double frac = 1.0 - ((double)i / (double)(_originalTable.Length - 1));

                double h = frac * 360.0 + 270.0;
                double s = Math.Abs(Math.Sin(frac * Math.PI));
                double v = Math.Pow((1.0 - frac), (1.0 / 3.0));

                // convert to rgb
                while (h >= 360.0)
                    h -= 360.0;

                h /= 60.0;
                int ii = (int)h;
                double f = h - ii;
                double p = v * (1 - s);
                double q = v * (1 - s * f);
                double t = v * (1 - s * (1.0 - f));

                byte bv, bt, bp, bq;
                bv = (byte)(v * 255);
                bt = (byte)(t * 255);
                bp = (byte)(p * 255);
                bq = (byte)(q * 255);

                switch (ii)
                {
                    case 0:
                        _originalTable[i] = new RGB(bv, bt, bp);
                        break;
                    case 1:
                        _originalTable[i] = new RGB(bq, bv, bp);
                        break;
                    case 2:
                        _originalTable[i] = new RGB(bp, bv, bt);
                        break;
                    case 3:
                        _originalTable[i] = new RGB(bp, bq, bv);
                        break;
                    case 4:
                        _originalTable[i] = new RGB(bt, bp, bv);
                        break;
                    case 5:
                        _originalTable[i] = new RGB(bv, bp, bq);
                        break;
                }
            }
            _table = new RGB[_originalTable.Length];
            _originalTable.CopyTo(_table, 0);
        }
    }
}

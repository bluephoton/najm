using System;
using System.Collections.Generic;
using System.Text;

namespace Najm.FITSIO
{
    internal class TableCellEnum : IEnumerator<ITableCell>
    {
        internal TableCellEnum(TableRow row)
        {
            _row = row;
            _current = -1;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #region data members
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private int _current;
        private TableRow _row;
        #endregion

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #region IEnumerator Members
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        object System.Collections.IEnumerator.Current { get { return _row[_current]; } }
        public bool MoveNext()
        {
            bool ret = true;
            _current++;
            if (_current >= _row.Header.FieldsCount)
            {
                ret = false;
            }
            return ret;
        }
        public void Reset() { _current = -1; }
        #endregion

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #region IEnumerator<ITableCell> Members
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ITableCell IEnumerator<ITableCell>.Current { get { return _row[_current]; } }
        #endregion

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #region IDisposable Members
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void Dispose() { }
        #endregion
    }

    internal class TableRow : ITableRow
    {
        internal TableRow(ITableHeader header, long index)
        {
            _header = header;
            _index = index;
            _cells = new TableCellBase[header.FieldsCount];
            for (int i = 0; i < _cells.Length; i++)
            {
                switch (_header.Table.Type)
                {
                    case TableType.ASCII:
                        _cells[i] = new TableCellASCII(this, (FieldInfoBase)header[i]);
                        break;
                    case TableType.Binary:
                        _cells[i] = new TableCellBinary(this, (FieldInfoBase)header[i]);
                        break;
                    default:
                        Utils.CheckBool(false, new TableException("Invalid table type encountered"));
                        break;
                }
            }
        }

        internal ITableHeader Header { get { return _header; } }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #region ITableRow Members
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public ITableCell this[int index] { get { return _cells[index]; } }
        public ITableCell this[string name] { get { return this[_header[name].Index]; } }
        #endregion

        internal long Index { get { return _index; } }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #region IEnumerable Members
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return new TableCellEnum(this); }
        #endregion

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #region data members
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private ITableHeader _header;
        private long _index;
        private TableCellBase[] _cells;
        #endregion

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #region IEnumerable<ITableCell> Members
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        IEnumerator<ITableCell> IEnumerable<ITableCell>.GetEnumerator() { return new TableCellEnum(this); }
        #endregion
    }
}
